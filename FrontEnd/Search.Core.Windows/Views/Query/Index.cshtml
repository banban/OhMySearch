@model Search.Core.Windows.Models.Query
@{
    ViewData["Title"] = "Search Results";
}
<div class="col-lg-pull-1 col-md-pull-1 col-sm-pull-1 col-lg-12 col-md-12 col-sm-12" data-position="fixed" data-role="content">
<div class="col-lg-9 col-md-9 col-sm-9" >
    @await Component.InvokeAsync("QueryOptions", new { query = Model })

    <ul class="nav nav-tabs" role="tablist">
        <li class="active"><a href="#Search-Results" role="tab" data-toggle="tab" aria-expanded="true" class="glyphicon glyphicon-list">Results <span class="badge">@Model.Total</span></a></li>
        <li><a id="MapsTab" href="#Search-Maps" role="tab" data-toggle="tab" class="glyphicon glyphicon-map-marker">Maps</a></li>
        @*<li><a href="#Search-Debug" role="tab" data-toggle="tab" class="glyphicon glyphicon-info-sign">Request Info</a></li>*@
    </ul>
    <div class="tab-content">
        <div class="tab-pane active" id="Search-Results">
            @if (Model.ChosenOptions.Contains("4_1")
                || (!Model.ChosenOptions.Contains("4_1") && !Model.ChosenOptions.Contains("4_2") && !Model.ChosenOptions.Contains("4_3")))
            {

                <div class="scroll col-lg-12 col-md-12">
                    <a class="jscroll-next" hidden href="~/Query/Scroll?from=0&term=@(Uri.EscapeUriString(Model.QueryTerm))&options=@(Uri.EscapeUriString(Model.ChosenOptions))&aggregations=@(Uri.EscapeUriString(Model.ChosenAggregations))">...</a>
                </div>
            }
            else if (Model.ChosenOptions.Contains("4_2"))
            {
                <div class="page col-lg-12 col-md-12">
                    @await Html.PartialAsync("Page")
                </div>
            }
            else if (Model.ChosenOptions.Contains("4_3"))
            {
                <div class="page col-lg-12 col-md-12">
                    @await Html.PartialAsync("Tile")
                </div>
            }
        </div>
        <div class="tab-pane" id="Search-Maps">
            <div id="googleMap"></div>
        </div>
        @*<div class="tab-pane" id="Search-Debug">
            <span id="searchDebugInfo">@Model.DebugInformation</span>
        </div>*@
    </div>
</div>


<div id="accordion" class="panel-group col-lg-push-1 col-md-push-1 col-sm-push-1 col-lg-3 col-md-3 col-sm-3">
    @*<div class="panel panel-info">
        <div class="panel-heading">
            <h4 class="panel-title">
               Level of confidence
            </h4>
        </div>
        <div id="collapse_LevelofConfidence" class="panel-collapse collapse in">
            <div class="panel-body">
                <output for="fader" id="confidencelbl" class="text-center">50%</output>
                <input type="range" min="0" max="100" value="50" id="confidence" orient="vertical" step="10" oninput="outputUpdate(value)" />
            </div>
        </div>
    </div>*@
    <i class="small">applied filter: @Model.ChosenAggregations</i>
    @foreach (var aggr in Model.GetAggregations())
    {
        <div class="panel panel-info">
            <div class="panel-heading">
                @*<a data-toggle="collapse" data-parent="#accordion" href="#collapse_@aggr.Replace(" ","")"></a>*@
                <label class="panel-title">
                    @aggr.Substring(aggr.IndexOf(".")+1).Replace("_", " ")
                </label>
            </div>
            <div id="collapse_@aggr.Replace(" ","")" class="panel-collapse collapse in">
                <div class="panel-body">
                    <ul class="list-unstyled">
                        @foreach (var item in Model.GetAggregations(aggr))
                        {
                            string key = aggr + "." + item.Key;
                            <li>
                                @*<label class="small"><input type="radio" name="@aggr" @Html.Raw((Model.ChosenAggregations.Contains(key) ? "checked" : "")) class="aggregate-filter" value="@key"> @item.Key <span class="badge">@item.Count</span></label>*@
                                <label class="small"><input type="checkbox" name="checkbox" @Html.Raw((Model.ChosenAggregations.Contains(key) ? "checked": "")) class="aggregate-filter" value="@key"> @item.Key <span class="badge">@item.Count</span></label>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    }
</div>
</div>

@section Scripts {
    <script src="~/lib/jquery.jscroll/jquery.jscroll.min.js"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=@(Environment.GetEnvironmentVariable("Google_MapApiKey"))&language=en" type="text/javascript"></script>
    <script src="~/js/GoogleMap.js"></script>
    <script type="text/javascript">
        $.ajaxSetup({ cache: false }); //disable modal dialog caching

        function outputUpdate(vol) {
            //document.querySelector('#confidencelbl').value = vol + "%";
            $('#confidencelbl').val(vol + " %");
        }

        $(document).ready(function () {
            $('.scroll').jscroll({
                //autoTriggerUntil: 3,
                //padding: 20,
                //loadingHtml: '<div>End of search</div>',
                loadingHtml: '<div class="row"><div class="col s4 center"><div class="progress"><div class="indeterminate"></div>End of search</div></div></div>',
                nextSelector: 'a.jscroll-next:last',
                contentSelector: 'li'
            });
            
            //Array.prototype.remove = function () {
            //    var what, a = arguments, L = a.length, ax;
            //    while (L && this.length) {
            //        what = a[--L];
            //        while ((ax = this.indexOf(what)) !== -1) {
            //            this.splice(ax, 1);
            //        }
            //    }
            //    return this;
            //};
            //var chosenAggs = [];
            
            $('input.aggregate-filter').click(function () {
                var agg = $(this).prop('value');
                //console.log(agg);
                var chousenaggs = $("#ChosenAggregations").val();
                if (!chousenaggs)
                {
                    chousenaggs = "";
                }
                //console.log($(this).is(":checked"));
                if ($(this).is(":checked")) {
                    //chosenAggs.push(agg);
                    $("#ChosenAggregations").val(chousenaggs + agg + "|");
                }
                else{
                    $("#ChosenAggregations").val(chousenaggs.replace(agg + "|", ""));
                    //chosenAggs.remove(agg);
                }
                console.log($("#ChosenAggregations").val());
            });

            //$(function () {
            //    $("#aggregations").accordion();
            //});

            //$('#confidence').change(function () {
            //    $('#confidencelbl').val(vol + " %");

            //    switch (this.value) {
            //        case 1:
            //            alert(1);
            //            $('#confidencelbl').html("Help me!");
            //            break;
            //        case 2:
            //            $('#confidencelbl').html("Not sure");
            //            break;
            //        case 3:
            //            $('#confidencelbl').html("Average");
            //            break;
            //        case 4:
            //            $('#confidencelbl').html("More or less");
            //            break;
            //        case 5:
            //            $('#confidencelbl').html("I know what I'm after");
            //            break;
            //        //default:
            //        //    $('#confidencelbl').html("No idea");
            //        //    break;
            //    }
        });
    </script>
}
